#Область ПрограммныйИнтерфейс

Процедура ОтправитьОтчетЗаПериод(Начало, Конец) Экспорт
	
	BotID = Константы.ИДБота.Получить();
	
	Соединение = ПодключениеИПроверкаТелеграм(BotID);
	Если Соединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДата = ТекущаяДатаСеанса();
	ТекстСообщения = ПолучитьТекстДетальногоАнализаЗаПериод(Начало, Конец);

	Пользователи = Справочники.Пользователи.Выбрать();
	
	Пока Пользователи.Следующий() Цикл
		
		ОтправитьСообщение(Соединение, BotID, Пользователи.ИДЧата, ТекстСообщения);
		
	КонецЦикла;
	
КонецПроцедуры 

Процедура ОбработатьКоманды() Экспорт
	
	BotID = Константы.ИДБота.Получить();

	Соединение = ПодключениеИПроверкаТелеграм(BotID);
	Если Соединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//получаем последние обновления
	ИДПоследнегоОбновления = ПолучитьИДПоследнегоОбновления();
	Если ИДПоследнегоОбновления = 0 Тогда
		ТекстОтбора = "";
	Иначе
		ТекстОтбора = "?offset=" + СтрЗаменить(Строка(ИДПоследнегоОбновления + 1),Символы.НПП,"");
	КонецЕсли; 
	Запрос = Новый HTTPЗапрос(BotID + "/getUpdates" + ТекстОтбора);
	HTTPОтвет = Соединение.Получить(Запрос);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку("utf-8"));
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
	
	Для Каждого Сообщение Из СтруктураОтвета.result Цикл
		
		Запись = РегистрыСведений.СинхронизированныеДанные.СоздатьМенеджерЗаписи();
		Запись.ИДОбновления = Сообщение.update_id;
		Запись.Записать();
		
		СтруктураСообщения = Сообщение.message;
		Отправитель = НайтиПользователя(СтруктураСообщения.from);
		Если Отправитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаСообщения = ДатаАпи(СтруктураСообщения.date);
		ТекстОтвета = "";
		
		ИДЧата = СтрЗаменить(Строка(СтруктураСообщения.chat.id),Символы.НПП,"");
		
		Если ПустаяСтрока(Отправитель.ИДЧата) Тогда
			Спр = Отправитель.ПолучитьОбъект();
			Спр.ИДЧата = ИДЧата;
			Спр.Записать();
		КонецЕсли; 
		
		Если СтруктураСообщения.chat.type <> "private" Тогда
			ОтправитьСообщение(Соединение, BotID, ИДЧата, "Извините, я отправляю сообщения только лично"); 	
		КонецЕсли; 
						
		Если СтруктураСообщения.Свойство("text") Тогда
			
			ТекстСообщения = НРег(СтруктураСообщения.text);
			СообщениеБезФорматирования = СтруктураСообщения.text;
			
		ИначеЕсли СтруктураСообщения.Свойство("voice") Тогда 
			
			ТекстОтвета = ТекстОтвета + "Ваше сообщение: " + СообщениеБезФорматирования + Символы.ПС;
			
			Звук = СтруктураСообщения.voice;
			Запрос = Новый HTTPЗапрос(BotID + "/getFile?file_id=" + Звук.file_id);
			Ответ = Соединение.Получить(Запрос);
			СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку();
			Чтение = Новый ЧтениеJSON;
			Чтение.УстановитьСтроку(СтрокаОтвет);
			Структура = ПрочитатьJSON(Чтение);
			
			Запрос = Новый HTTPЗапрос("/file/" + BotID + "/" + Структура.result.file_path);
			Ответ = Соединение.Получить(Запрос);
			ДД = Ответ.ПолучитьТелоКакДвоичныеДанные();
			
			Файл = ПолучитьИмяВременногоФайла("ogg");
			ДД.Записать(Файл);
			
			СлужебныеПроцедурыСервер.ОбновитьIAMЯндекс();	 
			СоединениеЯндекс = Новый HTTPСоединение("stt.api.cloud.yandex.net", 443, , , , 20, Новый ЗащищенноеСоединениеOpenSSL(), Неопределено);
			Заголовки = Новый Соответствие();
			Заголовки.Вставить("Authorization", "Bearer " + Константы.IAMТокенЯндекс.Получить());
			Заголовки.Вставить("Content-Type", "application/json");
			Запрос = Новый HTTPЗапрос("/speech/v1/stt:recognize/?topic=general&folderId=" + Константы.ИДПапкиЯндекс.Получить() + "&lang=ru-RU",Заголовки);
			Запрос.УстановитьТелоИзДвоичныхДанных(ДД);
			ИтогФайл = ПолучитьИмяВременногоФайла();
			Ответ = СоединениеЯндекс.ОтправитьДляОбработки(Запрос);
						
			СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку();
			
			Чтение = Новый ЧтениеJSON;
			Чтение.УстановитьСтроку(СтрокаОтвет);
			СтруктураОтвета = ПрочитатьJSON(Чтение);
			
			ТекстСообщения = НРег(СтруктураОтвета.result);
			СообщениеБезФорматирования = СтруктураОтвета.result;
			
		ИначеЕсли СтруктураСообщения.Свойство("photo") Тогда	
			
			ВсеФото = СтруктураСообщения.photo;
			ВыбранноеФото = ВсеФото[0];
			Обработано = Ложь;
			Для Каждого Фото Из ВсеФото Цикл
				
				Если Фото.file_size < 1048576 Тогда
					
					ВыбранноеФото = Фото;
					Запрос = Новый HTTPЗапрос(BotID + "/getFile?file_id=" + ВыбранноеФото.file_id);
					Ответ = Соединение.Получить(Запрос);
					СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку();
					Чтение = Новый ЧтениеJSON;
					Чтение.УстановитьСтроку(СтрокаОтвет);
					Структура = ПрочитатьJSON(Чтение);
								
					//Обрабатываем фото
					СоединениеQR = Новый HTTPСоединение("api.qrserver.com",443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
					Запрос = Новый HTTPЗапрос("/v1/read-qr-code/?fileurl=https://api.telegram.org/file/" + BotID + "/" + Структура.result.file_path);
					Ответ = СоединениеQR.Получить(Запрос);			
					СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку();
					Чтение = Новый ЧтениеJSON;
					Чтение.УстановитьСтроку(СтрокаОтвет);
					СтруктураОтвета = ПрочитатьJSON(Чтение);
					Если СтруктураОтвета[0].symbol[0].data <> Неопределено Тогда
						ТекстСообщения = СтруктураОтвета[0].symbol[0].data;
						Обработано = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		
		Иначе
			
			Возврат;
			
		КонецЕсли;
							
		Данные = ОбработатьКомандыСообщения(ТекстСообщения);
		Команда = Данные.Операция;
		Ключ = Данные.Ключ;
		Сумма = ПолучитьЧислоИзСтроки(ТекстСообщения, Ключ);
		БезНал = СтрНайти(ТекстСообщения, "безнал") <> 0;
		
		НачатьТранзакцию();
		
		//Обработка команды		
		Если Команда = "ОперацияСФизлицом" Тогда
			
		    ВыполнитьОперацииСФизЛицами(ТекстСообщения, ТекстОтвета);
			
		ИначеЕсли Команда = "ОперацииПоТоварам" Тогда
			
			Если СтрНайти(ТекстСообщения, "добавить") <> 0 Тогда
				ДобавитьТовары(ТекстСообщения, ТекстОтвета);
			КонецЕсли;
						
		ИначеЕсли Команда = "ОбработкаЧека" Тогда 	
			
			ПроверкаЧеков.ПроверитьЧек(ТекстСообщения, Отправитель, ТекстОтвета);
 							
		ИначеЕсли Команда = "ОперацияСДолгом" Тогда
			
			ВыполнитьОперацииПоДолгам(ТекстСообщения, Команда, СообщениеБезФорматирования, СтруктураСообщения.message_id, БезНал, ТекстОтвета);
			
		ИначеЕсли Команда = "Приход" Тогда
			
			ЭтоПлан = СтрНайти(ТекстСообщения,"план") <> 0 Или СтрНайти(ТекстСообщения,"ожидается") <> 0;						
			Статья = ПолучитьСтатьюПриходаРасхода(ТекстСообщения, Ключ);
			
			Если Сумма = 0 Тогда
				ТекстОтвета = ТекстОтвета + ТекстОшибкиНетСуммы(Ложь);				
			ИначеЕсли Не ЭтоПлан Тогда 				
				Документы.Операция.СоздатьИЗаполнить(Отправитель, Истина, Сумма, Статья, БезНал, ДатаСообщения);
				ТекстОтвета = ТекстОтвета + ТекстОтветаУспешнаяОперация(Истина, Сумма, Статья);				
			Иначе				
				ВыполнитьПлановыеОперации(ТекстСообщения, Перечисления.ПриходРасход.Приход, Отправитель, Сумма, Статья, ТекстОтвета);				
			КонецЕсли;
			
		ИначеЕсли Команда = "Расход" Тогда
			
			ЭтоПлан = СтрНайти(ТекстСообщения,"план") <> 0 Или СтрНайти(ТекстСообщения,"ожидается") <> 0;
			Статья = ПолучитьСтатьюПриходаРасхода(ТекстСообщения, Ключ);
			
			Если Сумма = 0 Тогда
				ТекстОтвета = ТекстОтвета + ТекстОшибкиНетСуммы(Ложь);
			ИначеЕсли Не ЭтоПлан Тогда 
				Успех = Документы.Операция.СоздатьИЗаполнить(Отправитель, Ложь, Сумма, Статья, БезНал, ДатаСообщения);
				Если Успех Тогда				
					ТекстОтвета = ТекстОтвета + ТекстОтветаУспешнаяОперация(Ложь, Сумма, Статья);							
				Иначе				
					ТекстОтвета = ТекстОтвета + ТекстОтветаНедостаточноСредств(БезНал);								 
				КонецЕсли;
			Иначе
				ВыполнитьПлановыеОперации(ТекстСообщения, Перечисления.ПриходРасход.Расход, Отправитель, Сумма, Статья, ТекстОтвета);
			КонецЕсли;
								 	
		ИначеЕсли Команда = "ПервоеСообщение" Тогда 
			
			ТекстОтвета = ТекстСообщенияПриветствие(Отправитель);
					
		ИначеЕсли Команда = "СведениеКОстатку" Тогда
			
			СвестиКОстатку(ТекстСообщения, Отправитель, ДатаСообщения, БезНал);
			ТекстОтвета = ТекстОтвета + ТекстОтветаУспешнаяОперация();
			
		ИначеЕсли Команда = "ПоказатьОстатки" Тогда
						
			ТекстОтвета = ТекстОтвета + ТекстОтветаУспешнаяОперация(,,,Ложь); 
			
		ИначеЕсли Команда = "ДетальныйАнализ" Тогда
			
			Параметры = ПолучитьПараметрыАнализа(ТекстСообщения);			
			
			ЭтоПлан = СтрНайти(ТекстСообщения,"план") <> 0 Или СтрНайти(ТекстСообщения,"ожидается") <> 0;
			
			Если ЭтоПлан Тогда	
				ТекстОтвета = ТекстОтвета + ТекстОтветаПлановыеОперации(Параметры.Начало,Параметры.Конец);
			Иначе
				ТекстОтвета = ТекстОтвета + ПолучитьТекстДетальногоАнализаЗаПериод(Параметры.Начало,Параметры.Конец,?(Параметры.ВсеПользователи,Неопределено,Отправитель));
			КонецЕсли;		
			 			
		ИначеЕсли Команда = "Перемещение" Тогда 	
			
			Успех = СоздатьПеремещение(ТекстСообщения, Отправитель, ДатаСообщения, БезНал);			
			Если Успех Тогда				
				ТекстОтвета = ТекстОтвета + ТекстОтветаУспешнаяОперация();				
			Иначе				
				ТекстОтвета = ТекстОтвета + ТекстОтветаНедостаточноСредств(БезНал);				
			КонецЕсли; 
			
		Иначе
			
			Если СтруктураСообщения.Свойство("photo") И Не Обработано Тогда
				ТекстОтвета = ТекстОтвета + "Не удалось распознать код на изображении. Повторите операцию.";
			Иначе
				ТекстОтвета = ТекстОтвета + ТекстОтветаНеизвестнаяОперация();
			КонецЕсли;
															
		КонецЕсли;
		
		ОтправитьСообщение(Соединение, BotID, ИДЧата, ТекстОтвета, СтруктураСообщения.message_id);
		
		ЗафиксироватьТранзакцию();
			
	КонецЦикла; 
		
КонецПроцедуры

Функция ПодключениеИПроверкаТелеграм(ИДБота) Экспорт
	
	Успешно = Ложь;
	
	ОсновнойПрокси = Константы.ОсновнойПрокси.Получить();
	
	Если Не ОсновнойПрокси.Пустая() Тогда
		ПроксиСервер = Новый ИнтернетПрокси();
		ПроксиСервер.Порт(ОсновнойПрокси.Порт);
		ПроксиСервер.Сервер(ОсновнойПрокси.Сервер);
		ПроксиСервер.Пользователь = ОсновнойПрокси.Пользователь;
		ПроксиСервер.Пароль = ОсновнойПрокси.Пароль;
		ПроксиСервер.Установить("https","" + НРег(ОсновнойПрокси.ТипПрокси) +  "://" + ОсновнойПрокси.Сервер, Число(ОсновнойПрокси.Порт), ОсновнойПрокси.Пользователь, ОсновнойПрокси.Пароль, Ложь);
		
		Соединение = Новый HTTPСоединение("api.telegram.org", 443, , , ПроксиСервер, 30, Новый ЗащищенноеСоединениеOpenSSL(), Неопределено);
		Попытка		
			Запрос = Новый HTTPЗапрос(ИДБота + "/getMe");	
			HTTPОтвет = Соединение.Получить(Запрос);
			Если HTTPОтвет.КодСостояния  = 200 Тогда				
				Успешно = Истина;					
			КонецЕсли;
			
		Исключение
			Константы.ОсновнойПрокси.Установить(Справочники.Прокси.ПустаяСсылка());
			ОсновнойПрокси.ПолучитьОбъект().Удалить();			
		КонецПопытки;
	КонецЕсли;
	
	Если Не Успешно Тогда
	
		ВыборкаПрокси = Справочники.Прокси.Выбрать();
		
		Пока ВыборкаПрокси.Следующий() Цикл
			
			ПроксиСервер = Новый ИнтернетПрокси();
			ПроксиСервер.Порт(ВыборкаПрокси.Порт);
			ПроксиСервер.Сервер(ВыборкаПрокси.Сервер);
			ПроксиСервер.Пользователь = ВыборкаПрокси.Пользователь;
			ПроксиСервер.Пароль = ВыборкаПрокси.Пароль;
			ПроксиСервер.Установить("https","" + НРег(ВыборкаПрокси.ТипПрокси) + "://" + ВыборкаПрокси.Сервер, Число(ВыборкаПрокси.Порт), ВыборкаПрокси.Пользователь, ВыборкаПрокси.Пароль, Ложь);
			
			Соединение = Новый HTTPСоединение("api.telegram.org", 443, , , ПроксиСервер, 30, Новый ЗащищенноеСоединениеOpenSSL(), Неопределено);
			Попытка		
				Запрос = Новый HTTPЗапрос(ИДБота + "/getMe");	
				HTTPОтвет = Соединение.Получить(Запрос);
				Если HTTPОтвет.КодСостояния = 200 Тогда
					Успешно = Истина;
					Константы.ОсновнойПрокси.Установить(ВыборкаПрокси.Ссылка);
					Прервать;
				КонецЕсли; 				
			Исключение
				ВыборкаПрокси.ПолучитьОбъект().Удалить();
				Продолжить;			
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;	
		
		
	Если Не Успешно Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Возврат Соединение;
	
КонецФункции

Функция ОтправитьСообщение(Соединение, BotID, Чат, Сообщение, ОтветНаСообщениеИД = "", Голосом = Ложь) Экспорт
	
	Если Голосом Тогда
		
		//Голосовухи
		
	Иначе	
		Запрос = Новый HTTPЗапрос(BotID + "/sendMessage?chat_id=" + Чат + "&text=" + Сообщение + ?(ПустаяСтрока(ОтветНаСообщениеИД),"","&reply_to_message_id=" + ОтветНаСообщениеИД));	
		Соединение.Получить(Запрос);
	КонецЕсли; 
	
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьИДПоследнегоОбновления()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СинхронизированныеДанные.ИДОбновления КАК ИДОбновления
	|ИЗ
	|	РегистрСведений.СинхронизированныеДанные КАК СинхронизированныеДанные
	|УПОРЯДОЧИТЬ ПО
	|	ИДОбновления УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИДОбновления;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция НайтиПользователя(ДанныеПользователя)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИмяПользователя = &ИмяПользователя";
	Запрос.УстановитьПараметр("ИмяПользователя", ДанныеПользователя.username);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли; 
	  	
КонецФункции

Функция ДатаАпи(Дата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(&ПромежуточнаяДата, ЧАС, &ЧасовойПояс) КАК Дата";
	Запрос.УстановитьПараметр("ПромежуточнаяДата", '19700101' + Дата);
	Запрос.УстановитьПараметр("ЧасовойПояс", Константы.ЧасовойПояс.Получить());
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	 
	Возврат РезультатЗапроса.Дата;
	
КонецФункции

Функция ПолучитьЧислоИзСтроки(ТекстСообщения, Ключ="")
		
	Сообщение = СтрЗаменить(ТекстСообщения,Ключ,"");
	
	Длина = СтрДлина(Сообщение);
	
	НачалоЧисла = Ложь;
	ЭтоЧисло = Ложь;
	ИтогЧислоСтрокой = "";
	
	Для Инд = 1 По Длина Цикл
		Символ = Сред(Сообщение, Инд, 1);
		Попытка
			Если Символ = "." Или Символ = " " Тогда
				ЭтоЧисло = Ложь;
			Иначе
				Число = Число(Символ);
				ЭтоЧисло = Истина;
			КонецЕсли; 		
		Исключение
		    ЭтоЧисло = Ложь; 
		КонецПопытки;
		
		Если ЭтоЧисло Или (Символ = "." И НачалоЧисла) Тогда
			
			ИтогЧислоСтрокой = ИтогЧислоСтрокой + Символ;
			НачалоЧисла = ?(НачалоЧисла, НачалоЧисла, Истина);
			
		ИначеЕсли НачалоЧисла Тогда
			
			Возврат Число(?(ИтогЧислоСтрокой = "","0",ИтогЧислоСтрокой));
	 
		КонецЕсли; 
	КонецЦикла;
	
	Если Не ПустаяСтрока(ИтогЧислоСтрокой) Тогда
				
		Возврат Число(?(ИтогЧислоСтрокой = "","0",ИтогЧислоСтрокой));
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
	
КонецФункции
 
Функция ПолучитьОстатки(БезНал = Неопределено)
		
	Запрос = Новый Запрос;
	Запрос.Текст =" 
	|ВЫБРАТЬ
	|	СредстваОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.Средства.Остатки КАК СредстваОстатки";
	
	Если БезНал <> Неопределено Тогда
		Запрос.УстановитьПараметр("ВидСредств",?(БезНал,Перечисления.ВидыСредств.Безналичные,Перечисления.ВидыСредств.Наличные));
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ СредстваОстатки.ВидСредств = &ВидСредств";
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Остаток = 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Остаток = Выборка.СуммаОстаток;
	КонецЕсли;
	
	Возврат Остаток;		
КонецФункции

Функция ПолучитьСтатьюПриходаРасхода(ТекстСообщения, Ключ)
	
	ВыборкаКлючей = Справочники.КлючиСтатейДоходаРасхода.Выбрать();
		
	Пока ВыборкаКлючей.Следующий() Цикл
				
		Если СтрНайти(ТекстСообщения, ВыборкаКлючей.Наименование) <> 0 Тогда
			Возврат ВыборкаКлючей.Владелец;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат Справочники.СтатьиДоходаРасхода.Прочее;
	
КонецФункции 

Функция ПолучитьПараметрыАнализа(ТекстСообщения)

	СтруктураПараметров = Новый Структура("ВсеПользователи,Начало,Конец");
	
	СтруктураПараметров.ВсеПользователи = СтрНайти(ТекстСообщения,"все") <> 0;
	
	Следующий = СтрНайти(ТекстСообщения, "следующ") <> 0 Или СтрНайти(ТекстСообщения, "завтра") <> 0;
	Предыдущий = СтрНайти(ТекстСообщения, "предыдущ") <> 0 Или СтрНайти(ТекстСообщения, "вчера") <> 0;
	
	ТекДата = ТекущаяДатаСеанса();		
	
	Если СтрНайти(ТекстСообщения, "месяц") Тогда
		Если Следующий Тогда
			ТекДата = КонецМесяца(ТекДата) + 1;	
		ИначеЕсли Предыдущий Тогда 	
			ТекДата = НачалоМесяца(ТекДата) - 1;
		КонецЕсли;  
		Начало = НачалоМесяца(ТекДата);
		Конец = КонецМесяца(ТекДата);
	ИначеЕсли СтрНайти(ТекстСообщения, "квартал") Тогда
		Если Следующий Тогда
			ТекДата = КонецКвартала(ТекДата) + 1;	
		ИначеЕсли Предыдущий Тогда 	
			ТекДата = НачалоКвартала(ТекДата) - 1;
		КонецЕсли;
		Начало = НачалоКвартала(ТекДата);
		Конец = КонецКвартала(ТекДата);
	ИначеЕсли СтрНайти(ТекстСообщения, "год") Тогда
		Если Следующий Тогда
			ТекДата = КонецГода(ТекДата) + 1;	
		ИначеЕсли Предыдущий Тогда 	
			ТекДата = НачалоГода(ТекДата) - 1;
		КонецЕсли;
		Начало = НачалоГода(ТекДата);
		Конец = КонецГода(ТекДата);
	ИначеЕсли СтрНайти(ТекстСообщения, "неделю") Тогда
		Если Следующий Тогда
			ТекДата = КонецНедели(ТекДата) + 1;	
		ИначеЕсли Предыдущий Тогда 	
			ТекДата = НачалоНедели(ТекДата) - 1;
		КонецЕсли;
		Начало = НачалоНедели(ТекДата);
		Конец = КонецНедели(ТекДата);
	Иначе
		
		Период = ОбработатьПериодПоМесяцамОтДаты(ТекстСообщения, ТекДата, Следующий, Предыдущий);
		
		Если Период = Неопределено Тогда
					 
			Если Следующий Тогда
				ТекДата = КонецДня(ТекДата) + 1;	
			ИначеЕсли Предыдущий Тогда 	
				ТекДата = НачалоДня(ТекДата) - 1;
			КонецЕсли;
			Начало = НачалоДня(ТекДата);
			Конец = КонецДня(ТекДата);
			
		Иначе
			
			Начало = Период.Начало;
			Конец = Период.Конец;
			
		КонецЕсли;
	КонецЕсли; 
	
	СтруктураПараметров.Начало = Начало;
	СтруктураПараметров.Конец = Конец;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ОбработатьПериодПоМесяцамОтДаты(ТекстСообщения, Дата, Следующий = Ложь, Предыдущий = Ложь)
		
	Если СтрНайти(ТекстСообщения, "январь") Тогда
		Месяц = 1;
	ИначеЕсли СтрНайти(ТекстСообщения, "февраль") Тогда
		Месяц = 2;
	ИначеЕсли СтрНайти(ТекстСообщения, "март") Тогда
		Месяц = 3;
	ИначеЕсли СтрНайти(ТекстСообщения, "апрель") Тогда
		Месяц = 4;
	ИначеЕсли СтрНайти(ТекстСообщения, "май") Тогда
		Месяц = 5;
	ИначеЕсли СтрНайти(ТекстСообщения, "июнь") Тогда
		Месяц = 6;
	ИначеЕсли СтрНайти(ТекстСообщения, "июль") Тогда
		Месяц = 7;
	ИначеЕсли СтрНайти(ТекстСообщения, "август") Тогда
		Месяц = 8;
	ИначеЕсли СтрНайти(ТекстСообщения, "сентябрь") Тогда
		Месяц = 9;
	ИначеЕсли СтрНайти(ТекстСообщения, "октябрь") Тогда
		Месяц = 10;
	ИначеЕсли СтрНайти(ТекстСообщения, "ноябрь") Тогда
		Месяц = 11;
	ИначеЕсли СтрНайти(ТекстСообщения, "декабрь") Тогда
	    Месяц = 12;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Год = Год(Дата);
	
	Если Следующий Тогда
		Год = Год + 1;
	ИначеЕсли Предыдущий Тогда
		Год = Год - 1;
	КонецЕсли; 
	
	Дата = Дата(Год, Месяц, 1);
	
	Возврат Новый Структура("Начало, Конец", Дата, КонецМесяца(Дата));
	
КонецФункции
 
Функция ПолучитьТекстДетальногоАнализаЗаПериод(Начало, Конец, Пользователь = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ИДЧата КАК ИДЧата
	|ПОМЕСТИТЬ Пользователи
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи";
	Если Пользователь <> Неопределено Тогда
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ Пользователи.Ссылка = &Пользователь";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	СредстваОбороты.Статья КАК Статья,
	|	ЕСТЬNULL(СредстваОбороты.СуммаПриход, 0) КАК СуммаПриход,
	|	ЕСТЬNULL(СредстваОбороты.СуммаРасход, 0) КАК СуммаРасход
	|ИЗ
	|	Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Средства.Обороты(&НачалоДня, &КонецПериода, , ) КАК СредстваОбороты
	|		ПО Пользователи.Ссылка = СредстваОбороты.Пользователь
	|ГДЕ НЕ СредстваОбороты.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОпераций.Перемещение)
	|ИТОГИ 
	|	Сумма(СуммаПриход),
	|   Сумма(СуммаРасход)
	|ПО
	|	Пользователь";
	Запрос.УстановитьПараметр("НачалоДня", Начало);
	Запрос.УстановитьПараметр("КонецПериода", Конец);
	
	Если Конец - Начало < 86400 Тогда
		ТекстПериода = Формат(Конец, "ДЛФ=D");
	Иначе
		ТекстПериода = Строка(Формат(Начало, "ДЛФ=D")) + " - " + Строка(Формат(Конец, "ДЛФ=D")) 
	КонецЕсли; 
	
	ТекстСообщения = "Детализация за " + ТекстПериода + ":
	                |************************************************";
	
	ВыборкаПользователь = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	Пока ВыборкаПользователь.Следующий() Цикл
		ТекстСообщения = ТекстСообщения + "
		|<<" + ВыборкаПользователь.Пользователь + ">> :
		|
		|  1)Доходы:";
		
		ВыборкаДетальные = ВыборкаПользователь.Выбрать();
		Пока ВыборкаДетальные.Следующий() Цикл
			Если ВыборкаДетальные.СуммаПриход <> 0 Тогда
				ТекстСообщения = ТекстСообщения + "
				|   * " + ВыборкаДетальные.Статья + " - " + ВыборкаДетальные.СуммаПриход + " руб.";
			КонецЕсли; 	
		КонецЦикла; 
		
		ТекстСообщения = ТекстСообщения + "
		|  ______________________________________________
		|  ИТОГО: " + ВыборкаПользователь.СуммаПриход + " руб.
		|
		|  2)Расходы:";
		
		ВыборкаДетальные.Сбросить();
		Пока ВыборкаДетальные.Следующий() Цикл
			Если ВыборкаДетальные.СуммаРасход <> 0 Тогда
				ТекстСообщения = ТекстСообщения + "
				|   * " + ВыборкаДетальные.Статья + " - " + ВыборкаДетальные.СуммаРасход;
			КонецЕсли; 	
		КонецЦикла;
		
		ТекстСообщения = ТекстСообщения + "
		|  ______________________________________________
		|  ИТОГО: " + ВыборкаПользователь.СуммаРасход + " руб.
		|************************************************
        |";		
	КонецЦикла; 
	
	ТекстСообщения = ТекстСообщения + "
		| Остаток на конец периода: 
		|  * Наличные - " + ПолучитьОстатки(Ложь) + " руб.
		|  * Безналичные - " + ПолучитьОстатки(Истина) + " руб.";
	
	Возврат ТекстСообщения;
	
КонецФункции

Процедура СвестиКОстатку(ТекстСообщения, ТекПользователь, Дата, БезНал)
	
	Сумма = ПолучитьЧислоИзСтроки(ТекстСообщения);
	Остаток = ПолучитьОстатки(БезНал);
	
	Дельта = Сумма - Остаток; 
	
	Если Дельта < 0 Тогда
		Приход = Ложь;
		Дельта = Дельта * -1;
	ИначеЕсли Дельта > 0 Тогда 
		Приход = Истина;
	Иначе
		Возврат;
	КонецЕсли; 
			
	Количество = КоличествоПользователей();
	
	Пользователи = Справочники.Пользователи.Выбрать();

	СуммаНаОдного = Число(Формат(Дельта / Количество, "ЧДЦ=2"));
	
	Пока Пользователи.Следующий() Цикл
		
		Документы.Операция.СоздатьИЗаполнить(Пользователи.Ссылка, Приход, СуммаНаОдного, Справочники.СтатьиДоходаРасхода.СведениеКОстатку, БезНал, Дата);	
		
		Дельта = Дельта - СуммаНаОдного;
		
	КонецЦикла;
	
	Если Дельта <> 0 Тогда
		Документы.Операция.СоздатьИЗаполнить(ТекПользователь, ?(Дельта>0,Истина,Ложь), ?(Дельта>0,Дельта,Дельта * -1), Справочники.СтатьиДоходаРасхода.СведениеКОстатку, БезНал, Дата);	
	КонецЕсли; 	
	
КонецПроцедуры

Функция ОбработатьКомандыСообщения(ТекстСообщения)
	
	СтруктураДанных = Новый Структура("Операция,Ключ");
		
	Если ТекстСообщения = "/start" Тогда
		СтруктураДанных.Операция = "ПервоеСообщение";
		Возврат СтруктураДанных;
	КонецЕсли;
	
	ВыборкаКлючейПрихода = Справочники.КлючиПрихода.Выбрать();			
	Пока ВыборкаКлючейПрихода.Следующий() Цикл
		Если СтрНайти(ТекстСообщения, ВыборкаКлючейПрихода.Наименование) <> 0 Тогда
			СтруктураДанных.Операция = "Приход";
			СтруктураДанных.Ключ = ВыборкаКлючейПрихода.Наименование;
			Возврат СтруктураДанных;
		КонецЕсли; 	
	КонецЦикла;
	
	ВыборкаКлючейРасхода = Справочники.КлючиРасхода.Выбрать();
	Пока ВыборкаКлючейРасхода.Следующий() Цикл
		Если СтрНайти(ТекстСообщения, ВыборкаКлючейРасхода.Наименование) <> 0 Тогда
			СтруктураДанных.Операция = "Расход";
			СтруктураДанных.Ключ = ВыборкаКлючейРасхода.Наименование;
			Возврат СтруктураДанных;
		КонецЕсли;		
	КонецЦикла; 
			
	ВыборкаКлючейПеремещения = Справочники.КлючиПеремещения.Выбрать();
	Пока ВыборкаКлючейПеремещения.Следующий() Цикл
		Если СтрНайти(ТекстСообщения, ВыборкаКлючейПеремещения.Наименование) <> 0 Тогда
			СтруктураДанных.Операция = "Перемещение";
			Возврат СтруктураДанных;
		КонецЕсли;	
	КонецЦикла;
	
							
	ВыборкаКлючейСведенияКОстатку = Справочники.КлючиСведенияКОстатку.Выбрать();
	Пока ВыборкаКлючейСведенияКОстатку.Следующий() Цикл
		Если СтрНайти(ТекстСообщения, ВыборкаКлючейСведенияКОстатку.Наименование) <> 0 Тогда
			СтруктураДанных.Операция = "СведениеКОстатку";
			Возврат СтруктураДанных;
		КонецЕсли;	
	КонецЦикла;
	
	
	ВыборкаКлючейОстатка = Справочники.КлючиОстатка.Выбрать();
	Пока ВыборкаКлючейОстатка.Следующий() Цикл
		Если СтрНайти(ТекстСообщения, ВыборкаКлючейОстатка.Наименование) <> 0 Тогда
			СтруктураДанных.Операция = "ПоказатьОстатки";
			Возврат СтруктураДанных;
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаКлючейДетализации = Справочники.КлючиДетализации.Выбрать();
	Пока ВыборкаКлючейДетализации.Следующий() Цикл
		Если СтрНайти(ТекстСообщения, ВыборкаКлючейДетализации.Наименование) <> 0 Тогда
			СтруктураДанных.Операция = "ДетальныйАнализ";
			Возврат СтруктураДанных;
		КонецЕсли;
	КонецЦикла;			
	
	Если СтрНайти(ТекстСообщения, "долг") <> 0 Тогда	
		СтруктураДанных.Операция = "ОперацияСДолгом";		
	ИначеЕсли СтрНайти(ТекстСообщения, "физлиц") <> 0 Тогда
		СтруктураДанных.Операция = "ОперацияСФизлицом";
	ИначеЕсли СтрНайти(ТекстСообщения, "t=") <> 0 Тогда
		СтруктураДанных.Операция = "ОбработкаЧека";
	ИначеЕсли СтрНайти(ТекстСообщения, "товар") <> 0 Тогда
		СтруктураДанных.Операция = "ОперацииПоТоварам";	
	КонецЕсли; 
				
	Возврат СтруктураДанных;
	
КонецФункции
 
Функция СоздатьПеремещение(ТекстСообщения, ТекПользователь, Дата, НаБезнал)
	
	Сумма = ПолучитьЧислоИзСтроки(ТекстСообщения);
	
	Остаток = ПолучитьОстатки(Не НаБезНал);
	
	Если Остаток < Сумма Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Успех = Документы.Операция.СоздатьИЗаполнить(ТекПользователь, Ложь, Сумма * -1, Справочники.СтатьиДоходаРасхода.Прочее, НаБезнал, Дата, Истина);
	Успех = Документы.Операция.СоздатьИЗаполнить(ТекПользователь, Истина, Сумма, Справочники.СтатьиДоходаРасхода.Прочее, Не НаБезнал, Дата, Истина);
	
	Возврат Успех;
	
КонецФункции
 
Функция ТекстОшибкиНетСуммы(ЭтоПриход)
	
	ТекстОтвета = "Кажется, вы не написали сумму " + ?(ЭтоПриход, "прихода", "расхода") + ". Перепишите приход правильно...";
	
	Возврат ТекстОтвета;
	
КонецФункции
 
Функция ТекстОтветаУспешнаяОперация(Приход = Ложь, Сумма = 0, Статья = Неопределено, ТекстУспешно = Истина) Экспорт
	
	ТекстОтвета = ?(ТекстУспешно, "Операция выполнена." + Символы.ПС,"");
		
	Если Приход Тогда
		ТекстОтвета = ТекстОтвета + "
		|Статья прихода: " + Статья;
	
	ИначеЕсли Сумма <> 0 Тогда
		ТекстОтвета = ТекстОтвета + "
		|Статья расхода: " + Статья;
	КонецЕсли; 
	
	ТекстОтвета = ТекстОтвета + "
	            |********************
				|Остаток средств:
				|Наличные - " + ПолучитьОстатки(Ложь) + " руб.
				|Безналичные - " + ПолучитьОстатки(Истина) + " руб.";
		
	Возврат ТекстОтвета + Символы.ПС;
	                                         
КонецФункции

Функция ТекстОтветаНедостаточноСредств(Безнал) Экспорт
	
	ТекстОтвета = "Недостаточно средств. У вас есть только " + ПолучитьОстатки(Безнал) + " руб. " + ?(Безнал,"по безналу.","наличными.");
	
	Возврат ТекстОтвета;
	
КонецФункции

Функция ТекстСообщенияПриветствие(Отправитель)
	
	ТекстОтвета = "Привет, " + Отправитель + "! 
					|Ты можешь вписывать сюда свои доходы и расходы. Просто напиши сообщение формата: ""приход/расход + сумма"", и я тебя пойму.";
	
	Возврат ТекстОтвета;
		
КонецФункции

Функция ТекстОтветаНеизвестнаяОперация()
	
	ТекстОтвета = "Извините, мне не понятно, что вы хотите мне сообщить...";
	
	Возврат ТекстОтвета;
	
КонецФункции
 
Процедура ВыполнитьОперацииПоДолгам(ТекстСообщения, Команда, Комментарий, ИДСообщения, БезНал, ТекстОтвета)
	
	Выдавший = НайтиФизЛицо(ТекстСообщения);
	
	НашлиФизЛицо = ?(Выдавший = Неопределено, Ложь, Истина);
	
	Если СтрНайти(ТекстСообщения, "новый") <> 0 И НашлиФизЛицо Тогда
		
		СпрДолг = Справочники.Долг.СоздатьЭлемент();
		СпрДолг.Выдавший = Выдавший;
		СпрДолг.Сумма = ПолучитьЧислоИзСтроки(ТекстСообщения);
		СпрДолг.Наименование = "Взят долг у " + Выдавший;
		СпрДолг.Безнал = БезНал;
		СпрДолг.НеСоздаватьПоступление = ?(СтрНайти(ТекстСообщения, "остат") <> 0, Истина, Ложь);
		СпрДолг.Комментарий = Комментарий;
		СпрДолг.ИДСообщения = ИДСообщения;
		СпрДолг.Записать();
		ТекстОтвета = ТекстОтвета + "Создан новый долг. Выдавший: " + Выдавший + ", сумма: " + СпрДолг.Сумма + " руб."; 
			
	ИначеЕсли СтрНайти(ТекстСообщения, "уменьш") <> 0 И НашлиФизЛицо Тогда
		
		Сумма = -ПолучитьЧислоИзСтроки(ТекстСообщения);
		
		ТекДолг = НайтиДолг(Выдавший);
		Если ТекДолг = Неопределено Тогда
			
			ТекстОтвета = ТекстОтвета + " У физлица " + Выдавший + " нет неоплаченных долгов.";
			
		Иначе
		
			Успешно = ДвижениеДолга(ТекДолг, Сумма, Комментарий, ИДСообщения, БезНал);
			
			Если Успешно Тогда
			 
				ОстатокДолга = ОстатокДолга(Выдавший);
				
				Если ОстатокДолга = 0 Тогда
					
					ТекстОтвета = ТекстОтвета + "Долг " + Выдавший + " оплачен! Поздравляю!!!";
					
				Иначе
					
					ТекстОтвета = ТекстОтвета + "Долг " + Выдавший + " уменьшен на " + -Сумма + " руб. Остаток долга: " + ОстатокДолга + " руб.";
				
				КонецЕсли; 
				
				ТекстОтвета = ТекстОтвета + Символы.ПС + ТекстОтветаУспешнаяОперация(,,,Ложь);
				
			Иначе
				
				ТекстОтвета = ТекстОтвета + "Недостаточно средств для списания!" + Символы.ПС + ТекстОтветаУспешнаяОперация(,,,Ложь);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ТекстСообщения, "увелич") <> 0 И НашлиФизЛицо Тогда
		
		Сумма = ПолучитьЧислоИзСтроки(ТекстСообщения);
		
		ТекДолг = НайтиДолг(Выдавший);
		Если ТекДолг = Неопределено Тогда
			
			ТекстОтвета = ТекстОтвета + " У физлица " + Выдавший + " нет неоплаченных долгов. Создайте новый долг.";
			
		Иначе
		
			Успешно = ДвижениеДолга(ТекДолг, Сумма, Комментарий, ИДСообщения, БезНал);
			 
			ТекстОтвета = ТекстОтвета + "Долг физлицу: " + Выдавший + " увеличен на " + Сумма + " руб. Остаток долга: " + ОстатокДолга(Выдавший) + Символы.ПС + ТекстОтветаУспешнаяОперация(,,,Ложь);
		
		КонецЕсли;
		
	ИначеЕсли Команда = "ПоказатьОстаток" Тогда
		
		ТекстОтвета = ТекстОтвета + ТекстОтветаОстаткиДолгов(?(НашлиФизЛицо,Выдавший,Неопределено));
		
	ИначеЕсли Команда = "ДетальныйАнализ" И НашлиФизЛицо Тогда 
		
		ТекстОтвета =  ТекстОтвета + ТекстДетальныйАнализДолга(Выдавший);
		
	ИначеЕсли Не НашлиФизЛицо Тогда
		
		ТекстОтвета = ТекстОтвета + "В базе отсутствует физическое лицо. Создайте его, написав: ""Новое физлицо [Имя], [Номер карты]""";		
		
	Иначе	
		ТекстОтвета = ТекстОтвета + "Извините, мне не понятно, что вы хотите мне сообщить...";
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры
 
Функция НайтиДолг(Выдавший)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Долг.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Долг КАК Долг
	|ГДЕ
	|	Долг.Выдавший = &Выдавший
	|	И НЕ Долг.Закрыт
	|	И НЕ Долг.ПометкаУдаления";
	Запрос.УстановитьПараметр("Выдавший", Выдавший);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли; 
	 	
КонецФункции

Функция ОстатокДолга(Выдавший)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолгиОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.Долги.Остатки(
	|			,
	|			Выдавший = &Выдавший
	|				И НЕ Долг.Закрыт) КАК ДолгиОстатки";
	Запрос.УстановитьПараметр("Выдавший", Выдавший);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СуммаОстаток;
	КонецЕсли;
	 
	
КонецФункции
 
Функция ДвижениеДолга(Долг, Сумма, Комментарий, ИДСообщения, Безнал)
		
	Количество = КоличествоПользователей();
	
	Пользователи = Справочники.Пользователи.Выбрать();

	СуммаНаОдного = Число(Формат(Сумма / Количество, "ЧДЦ=2"));
	ОстатокСуммы = Сумма;
	
	Если Сумма < 0 Тогда
		Остаток = ПолучитьОстатки(Безнал);
		Если Остаток < -Сумма Тогда
			Возврат Ложь;	
		КонецЕсли; 
	КонецЕсли; 
	
	Пока Пользователи.Следующий() Цикл
		
		Документы.Операция.СоздатьИЗаполнить(Пользователи.Ссылка, ?(СуммаНаОдного < 0,Ложь,Истина), ?(СуммаНаОдного < 0, -СуммаНаОдного, СуммаНаОдного), Справочники.СтатьиДоходаРасхода.ВзятиеВДолг, Безнал, ТекущаяДатаСеанса());	
		
		ОстатокСуммы = ОстатокСуммы - СуммаНаОдного;
		
	КонецЦикла;
	
	Если ОстатокСуммы <> 0 Тогда
		Документы.Операция.СоздатьИЗаполнить(Пользователи.Ссылка, ?(ОстатокСуммы>0,Истина,Ложь), ?(ОстатокСуммы>0,ОстатокСуммы,ОстатокСуммы * -1), Справочники.СтатьиДоходаРасхода.ВзятиеВДолг, Безнал, ТекущаяДатаСеанса());	
	КонецЕсли;	
	
	Док = Документы.ПересчетДолга.СоздатьДокумент();
	Док.Дата = ТекущаяДатаСеанса();
	Док.Долг = Долг; 
	Док.Сумма = Сумма;
	Док.Комментарий = Комментарий;
	Док.ИДСообщения = ИДСообщения;
	Док.Записать(РежимЗаписиДокумента.Проведение);
	
	Если ОстатокДолга(Долг.Выдавший) = 0 Тогда
		СпрДолг = Долг.ПолучитьОбъект();
		СпрДолг.Закрыт = Истина;
		СпрДолг.Записать();
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

Функция ТекстОтветаОстаткиДолгов(Выдавший = Неопределено)
	ТекстСообщения = "Остатки долгов:" ;
	ВсегоДолгов = 0;
	Если Выдавший <> Неопределено Тогда
		Остаток = ОстатокДолга(Выдавший);
		ТекстСообщения = ТекстСообщения + "  * " + Выдавший + " : " + Остаток + " руб.";
		ВсегоДолгов = ВсегоДолгов + Остаток;
	Иначе
		Выборка = Справочники.ФизическиеЛица.Выбрать();
		Пока Выборка.Следующий() Цикл
			Остаток = ОстатокДолга(Выборка.Ссылка);
			Если Остаток > 0 Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + "  * " + Выборка + " : " + Остаток + " руб.";
			КонецЕсли;
			ВсегоДолгов = ВсегоДолгов + Остаток;
		КонецЦикла;  
	КонецЕсли;
	
	ТекстСообщения = ТекстСообщения + "
					|___________________________________
					| ИТОГО долгов: " + ВсегоДолгов + " руб.";
	
	Возврат ТекстСообщения;
КонецФункции

Процедура ВыполнитьОперацииСФизЛицами(ТекстСообщения, ТекстОтвета)
	
	Если СтрНайти(ТекстСообщения, "создать") <> 0 Тогда
		
		Данные = СтрЗаменить(ТекстСообщения, "создать физлицо ", "");
		Данные = СтрРазделить(Данные,",", Ложь);
		СпрФЛ = Справочники.ФизическиеЛица.СоздатьЭлемент();
		СпрФЛ.Наименование = ТРег(Данные[0]);
		СпрФЛ.НомерКарты = ?(Данные.Количество() > 1, Данные[1], "");
		СпрФЛ.Записать();
		ТекстОтвета = ТекстОтвета + "Создано физлицо: " + СпрФЛ.Наименование + ?(ЗначениеЗаполнено(СпрФЛ.НомерКарты),", номер карты: " + СпрФЛ.НомерКарты,"");
	ИначеЕсли СтрНайти(ТекстСообщения, "изменить") <> 0 Тогда 	
		
		ФизЛицо = НайтиФизЛицо(ТекстСообщения);
		
		Если ФизЛицо = Неопределено Тогда
			ТекстОтвета = ТекстОтвета + "Ошибка команды! В базе отсутствует физическое лицо.";
		Иначе
			НомерКарты = СтрЗаменить(Строка(ПолучитьЧислоИзСтроки(ТекстСообщения)),Символы.НПП,"");
			Если НомерКарты = 0 Тогда
				ТекстОтвета = ТекстОтвета + "Введите номер карты физлица!";
			Иначе
				СпрФЛ = ФизЛицо.ПолучитьОбъект();
				СпрФЛ.НомерКарты = НомерКарты;
				СпрФЛ.Записать();
				ТекстОтвета = ТекстОтвета + "Номер карты физлица " + ФизЛицо + " изменен!";
			КонецЕсли; 
		КонецЕсли; 
		
	ИначеЕсли СтрНайти(ТекстСообщения, "информация") <> 0 Тогда
		ФизЛицо = НайтиФизЛицо(ТекстСообщения);
		
		Если ФизЛицо = Неопределено Тогда
			ТекстОтвета = ТекстОтвета + "Ошибка команды! В базе отсутствует физическое лицо.";
		Иначе
			ТекстОтвета = ТекстОтвета + "Информация о физлице: " + ФизЛицо + ":
										|________________________________________
										|   *Номер карты: " + ФизЛицо.НомерКарты; 
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Функция НайтиФизЛицо(ТекстСообщения)
	
	НашлиФизЛицо = Ложь;
	МассивСлов = СтрРазделить(ТекстСообщения, " ",Ложь);
	Запрос= Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛицаСклонения.Ссылка КАК Ссылка,
	|	ФизическиеЛицаСклонения.СклоненноеИмя КАК Наименование
	|ИЗ
	|	Справочник.ФизическиеЛица.Склонения КАК ФизическиеЛицаСклонения";
	Выборка = Запрос.Выполнить().Выбрать();
	Для Каждого Слово Из МассивСлов Цикл
		Пока Выборка.Следующий() Цикл
			Если СтрНайти(НРег(Выборка.Наименование), Слово) <> 0 Тогда
				НашлиФизЛицо = Истина;
				ФизЛицо = Выборка.Ссылка;
				Прервать;
			КонецЕсли;

		КонецЦикла;
		Если НашлиФизЛицо Тогда
			Прервать;
		КонецЕсли;
		Выборка.Сбросить();
	КонецЦикла;
	
	Возврат ?(НашлиФизЛицо,ФизЛицо,Неопределено);
	
КонецФункции

Функция ТекстДетальныйАнализДолга(Выдавший)
	
	ТекстСообщения = "Анализ долга перед физлицом " + Выдавший + "
					|*****************************************" + Символы.ПС;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолгиОбороты.Период КАК Период,
	|	СУММА(ДолгиОбороты.СуммаПриход) КАК СуммаПриход,
	|	СУММА(ДолгиОбороты.СуммаРасход) КАК СуммаРасход
	|ИЗ
	|	РегистрНакопления.Долги.Обороты(
	|			,
	|			,
	|			День,
	|			Выдавший = &Выдавший
	|				И НЕ Долг.Закрыт) КАК ДолгиОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДолгиОбороты.Период";
	Запрос.УстановитьПараметр("Выдавший", Выдавший);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИтогПриход = 0;
	ИтогРасход = 0;
	
	Пока Выборка.Следующий() Цикл
		
		ИтогПриход = ИтогПриход + Выборка.СуммаПриход;
		ИтогРасход = ИтогРасход + Выборка.СуммаРасход;
		
		ТекстСообщения = ТекстСообщения + " Дата: " + Формат(Выборка.Период, "ДЛФ=D") + Символы.ПС + 
						?(ЗначениеЗаполнено(Выборка.СуммаПриход), "    *Увеличение: " + Выборка.СуммаПриход + " руб." + Символы.ПС,"") +
						?(ЗначениеЗаполнено(Выборка.СуммаРасход), "    *Уменьшение: " + Выборка.СуммаРасход + " руб." + Символы.ПС,"");	
	КонецЦикла;  
	
	ТекстСообщения = ТекстСообщения + "
	|____________________________________
	| ИТОГО: 
	|   *Получено в долг: " + ИтогПриход + " руб.
	|   *Погашено: " + ИтогРасход + " руб.";
	
	Возврат ТекстСообщения;
	
КонецФункции
 
Процедура ДобавитьТовары(ТекстСообщения, ТекстОтвета)
	
	МассивДанных = СтрРазделить(ТекстСообщения, ":");
	
	Статья = ПолучитьСтатьюПриходаРасхода(МассивДанных[0],Новый Структура("КлючПрихода,КлючРасхода","товар")).СтатьяПрихода;
	
	МассивТоваров = СтрРазделить(МассивДанных[1],",");
	
	НазванияТоваровСтрока = "";
	
	Для Каждого Товар Из МассивТоваров Цикл
		
		ДанныеТовара = СтрРазделить(Товар, "-", Ложь);
		
		ИмяТовара = СокрЛП(ДанныеТовара[0]);
		Если ДанныеТовара.Количество() <> 1 Тогда
			МассивКлючей = СтрРазделить(ДанныеТовара[1],";",Ложь);
		КонецЕсли;
		
		ТакойжеТовар = Справочники.Товары.НайтиПоНаименованию(ИмяТовара, Ложь);
		Если ТакойжеТовар.Пустая() Тогда
			
			НовСпр = Справочники.Товары.СоздатьЭлемент();
			НовСпр.Наименование = ИмяТовара;
			НовСпр.Статья = Статья;
			
			НовСтр = НовСпр.Ключи.Добавить();
			НовСтр.Ключ = ИмяТовара;
			
			Если МассивКлючей <> Неопределено Тогда
				
				Для Каждого Ключ Из МассивКлючей Цикл
					
					НовСтр = НовСпр.Ключи.Добавить();
					НовСтр.Ключ = СокрЛП(Ключ);
					
				КонецЦикла;
				
			КонецЕсли;
			
			НовСпр.Записать();
			
		КонецЕсли;
		НазванияТоваровСтрока = НазванияТоваровСтрока + Символы.ПС + НовСпр.Наименование;
	КонецЦикла;
	
	ТекстОтвета = ТекстОтвета + "Добавлены товары категории " + Статья + ":" + НазванияТоваровСтрока;
	
КонецПроцедуры

Процедура ВыполнитьПлановыеОперации(ТекстСообщения, ТипОперации, Пользователь, Сумма, Статья, ТекстОтвета)
	
	СтрокаБезСуммы = СтрЗаменить(ТекстСообщения, Строка(Сумма),"");
	
	Дата = НайтиДатуВСообщении(СтрокаБезСуммы, Сумма);	
	Запись = РегистрыСведений.ПланируемыеДоходыРасходы.СоздатьМенеджерЗаписи();
	Запись.Период = Дата;
	Запись.ПриходРасход = ТипОперации;
	Запись.Пользователь = Пользователь;
	Запись.Статья = Статья;
	Запись.Сумма = Сумма;
	Запись.Записать(Истина);
	
	ТекстОтвета = ТекстОтвета + "Операция прошла успешно. Ожидается " + ?(ТипОперации=Перечисления.ПриходРасход.Приход,"поступление","списание")
				  + " денежных средств " + Формат(Дата, "ДЛФ=DD") + " по статье " + Статья + ". Сумма: " + Сумма + " руб.";
	
КонецПроцедуры
 
Функция НайтиДатуВСообщении(ТекстСообщения, ИсключениеСуммы = 0)
	
	ИсключениеСуммы = СтрЗаменить(Строка(ИсключениеСуммы),Символы.НПП,"");
	СтрокаАнализа = СтрЗаменить(ТекстСообщения, ИсключениеСуммы, "");
	СтрокаАнализа = СтрЗаменить(СтрокаАнализа, СтрЗаменить(ИсключениеСуммы,".",","), "");
	
	День = ПолучитьЧислоИзСтроки(СтрокаАнализа);
	ТекДата = ТекущаяДатаСеанса();
	
	Если День(ТекДата) < День Тогда
		Месяц = Месяц(ТекДата);
		Год = Год(ТекДата);
	Иначе
		Если Месяц(ТекДата) + 1 > 12 Тогда
			Месяц = 1;
			Год = Год(ТекДата) + 1;
		Иначе
			Месяц = Месяц(ТекДата) + 1;
			Год = Год(ТекДата); 
		КонецЕсли; 
	КонецЕсли; 

	Возврат Дата(Год, Месяц, День, 23, 59, 59);
	
КонецФункции
 
Функция КоличествоПользователей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Пользователи.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	Возврат РезультатЗапроса.Количество;
	
КонецФункции
 
Функция ПотраченоЗаПериод(Пользователь, Начало, Конец)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СредстваОбороты.СуммаРасход КАК Расход
	|ИЗ
	|	РегистрНакопления.Средства.Обороты(
	|			&Начало,
	|			&Конец,
	|			Авто,
	|			ТипОперации <> ЗНАЧЕНИЕ(Перечисление.ТипыОпераций.Перемещение)
	|				И ТипОперации <> ЗНАЧЕНИЕ(Справочник.СтатьиДоходаРасхода.СведениеКОстатку)
	|				И Пользователь = &Пользователь) КАК СредстваОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	СредстваОбороты.СуммаРасход";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Начало", Начало);
	Запрос.УстановитьПараметр("Конец", Конец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Расход;
	Иначе
		Возврат 0;
	КонецЕсли; 		 
	
КонецФункции
  
Функция ТекстОтветаПлановыеОперации(Начало, Конец)
	
	Текст = "Планируемые операции за период " + Формат(Начало,"ДЛФ=D") + " - " + Формат(Конец,"ДЛФ=D") + "
			|********************************************";
	
	ПлановыеОперацииРезультатЗапроса = ПолучитьПлановыеОперацииЗаПериод(Начало, Конец);
	Выборка = ПлановыеОперацииРезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИтогоПриход = 0;
	ИтогоРасход = 0;
	Пока Выборка.Следующий() Цикл
		
		Текст = Текст + "
				| < " + Формат(Выборка.Дата,"ДЛФ=D") + " >";
		
		ВыборкаДетЗаписи = Выборка.Выбрать();
		
		Пока ВыборкаДетЗаписи.Следующий() Цикл
			
			ИтогоПриход = ИтогоПриход + ВыборкаДетЗаписи.СуммаПрихода;
			ИтогоРасход = ИтогоРасход + ВыборкаДетЗаписи.СуммаРасхода;
			
			Текст = Текст + "
					| Поступления: " + ВыборкаДетЗаписи.СуммаПрихода + " руб." + ?(ВыборкаДетЗаписи.СуммаПрихода <> 0, " Статья: " + ВыборкаДетЗаписи.СтатьяПрихода,"") + ";
					| Расходы: " + ВыборкаДетЗаписи.СуммаРасхода + " руб." + ?(ВыборкаДетЗаписи.СуммаРасхода <> 0, " Статья: " + ВыборкаДетЗаписи.СтатьяРасхода,"");
			
		КонецЦикла; 
		
		Текст = Текст + "
				|____________________________________";		
		
	КонецЦикла; 
	
	Текст = Текст + " 
			|  ИТОГО:
			| * Поступления: " + ИтогоПриход + " руб.
			| * Расходы: " + ИтогоРасход + " руб.";
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьПлановыеОперацииЗаПериод(Начало, Конец)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Начало", Начало);
	Запрос.УстановитьПараметр("Конец", Конец);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПланируемыеДоходыРасходы.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ПриходРасход.Приход)
	|			ТОГДА ПланируемыеДоходыРасходы.Статья
	|	КОНЕЦ КАК СтатьяПрихода,
	|	ВЫБОР
	|		КОГДА ПланируемыеДоходыРасходы.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ПриходРасход.Расход)
	|			ТОГДА ПланируемыеДоходыРасходы.Статья
	|	КОНЕЦ КАК СтатьяРасхода,
	|	СУММА(ВЫБОР
	|			КОГДА ПланируемыеДоходыРасходы.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ПриходРасход.Приход)
	|				ТОГДА ПланируемыеДоходыРасходы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПрихода,
	|	СУММА(ВЫБОР
	|			КОГДА ПланируемыеДоходыРасходы.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ПриходРасход.Расход)
	|				ТОГДА ПланируемыеДоходыРасходы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРасхода,
	|	НАЧАЛОПЕРИОДА(ПланируемыеДоходыРасходы.Период, ДЕНЬ) КАК Дата
	|ИЗ
	|	РегистрСведений.ПланируемыеДоходыРасходы КАК ПланируемыеДоходыРасходы
	|ГДЕ
	|	ПланируемыеДоходыРасходы.Период МЕЖДУ &Начало И &Конец
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ПланируемыеДоходыРасходы.Период, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА ПланируемыеДоходыРасходы.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ПриходРасход.Приход)
	|			ТОГДА ПланируемыеДоходыРасходы.Статья
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПланируемыеДоходыРасходы.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ПриходРасход.Расход)
	|			ТОГДА ПланируемыеДоходыРасходы.Статья
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|ИТОГИ
	|	СУММА(СуммаПрихода),
	|	СУММА(СуммаРасхода)
	|ПО
	|	Дата";
		
	Возврат Запрос.Выполнить();
		
КонецФункции
 

#КонецОбласти


  